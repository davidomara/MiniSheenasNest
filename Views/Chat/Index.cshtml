@model IEnumerable<MiniSheenasNest.Models.Messages>

@{
    ViewData["Title"] = "Conversation";

    // Get the user names from the ViewBag (e.g. "Sheena" or "Nord")
    var currentUser = (string)ViewBag.CurrentUser;
    var otherUser = (string)ViewBag.OtherUser;

    // Ternary logic to determine which image to display
    // Adjust filenames/paths as needed:
    string currentUserImgPath = (currentUser == "Sheena")
        ? "~/images/sheena.jpg"
        : "~/images/nord.jpg";

    string otherUserImgPath = (otherUser == "Sheena")
        ? "~/images/sheena.jpg"
        : "~/images/nord.jpg";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"]</title>
    <style>
        .chat-container {
            width: 60%;
            max-width: 800px;
            margin: 0 auto;
            border: 1px solid #ccc;
            background: #e5ddd5;
            border-radius: 8px;
            display: flex;
            flex-direction: column;
            font-family: Arial, sans-serif;
            height: 80vh;
            overflow: hidden;
        }

        .chat-header {
            background-color: #075E54;
            color: #fff;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 10px;
            border-top-left-radius: 8px;
            border-top-right-radius: 8px;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }

            .user-info img {
                width: 45px;
                height: 45px;
                border-radius: 50%;
                object-fit: cover;
                border: 2px solid #09d261;
            }

            .user-info h2 {
                margin: 0;
                font-size: 1.2rem;
            }

        .chat-messages {
            flex: 1;
            padding: 10px;
            overflow-y: auto;
        }

        .chat-list {
            list-style: none;
            margin: 0;
            padding: 0;
        }

        .chat-bubble {
            display: inline-block;
            padding: 8px 12px;
            border-radius: 12px;
            margin: 6px 0;
            clear: both;
            max-width: 70%;
            position: relative;
            font-size: 0.95rem;
            line-height: 1.3;
        }

        .outgoing {
            background-color: #dcf8c6;
            float: right;
            text-align: left;
        }

        .incoming {
            background-color: #fff;
            float: left;
        }

        .bubble-footer {
            font-size: 0.75rem;
            color: #888;
            margin-top: 4px;
            text-align: right;
        }

        .chat-input-area {
            background: #f0f0f0;
            padding: 10px;
            border-top: 1px solid #ccc;
        }

        .chat-form {
            display: flex;
            align-items: center;
            gap: 10px;
            margin: 0;
        }

            .chat-form textarea {
                flex: 1;
                min-height: 40px;
                resize: none;
                border: 1px solid #ccc;
                border-radius: 4px;
                padding: 8px;
                font-size: 0.95rem;
            }

            .chat-form button {
                width: 80px;
                height: 40px;
                background-color: #09d261;
                color: #fff;
                border: none;
                border-radius: 4px;
                font-weight: bold;
                cursor: pointer;
            }

                .chat-form button:hover {
                    background-color: #07b457;
                }

        .chat-list::after {
            content: "";
            display: block;
            clear: both;
        }
    </style>
    <style>
        /* Modal Styling */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 50%;
            top: 50%;
            width: 40%;
            height: 20%;
            transform: translate(-50%, -50%);
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            padding: 15px;
            font-family: Arial, sans-serif;
            overflow: hidden;
        }

        /* Modal Content */
        .modal-content {
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        /* Close Button */
        .close {
            position: absolute;
            top: 8px;
            right: 12px;
            font-size: 20px;
            font-weight: bold;
            cursor: pointer;
        }

        /* Form Styling */
        #editMessageForm {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        #updatedContent {
            width: 100%;
            height: 50px; /* Adjusted for readability */
            resize: none;
            padding: 5px;
            font-size: 0.9rem;
        }

        button {
            width: auto;
            padding: 5px 10px;
            font-size: 0.9rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

            button[type="submit"] {
                background-color: #09d261;
                color: white;
            }

            button#cancelEdit {
                background-color: #d9534f;
                color: white;
            }
    </style>
</head>
<body>

    <div class="chat-container">

        <!-- HEADER: Display both the current user & the other user -->
        <div class="chat-header">
            <!-- Left side: other user info -->
            <div class="user-info">
                <img src="@Url.Content(otherUserImgPath)" alt="@otherUser" />
                <h2>@otherUser</h2>
            </div>

            <!--  Right side: current user info -->
            <div class="user-info">
                <img src="@Url.Content(currentUserImgPath)" alt="@currentUser" />
                <h2>@currentUser</h2>
            </div>

        </div>

        <!-- Main messages area -->
        <div class="chat-messages" style="background-image:src(../../wwwroot/twonords.jpg)">
            @if (Model != null && Model.Any())
            {
                <!-- Adjust the Edit link in the messages list -->
                <ul class="chat-list">
                    @foreach (var msg in Model)
                    {
                        var bubbleClass = (msg.SenderName == currentUser) ? "outgoing" : "incoming";
                        <li class="chat-bubble @bubbleClass">
                            @msg.Content

                            <div class="bubble-footer">
                                @msg.SentAt.ToString("HH:mm")
                                @{
                                    var checks = msg.IsRead ? "✔✔" : "✔";
                                }
                                @checks

                                @if (!msg.IsRead && msg.SenderName == currentUser)
                                {
                                    <!-- Open Edit Modal -->
                                    <a href="#" class="edit-link" data-message-id="@msg.MessageId" data-message-content="@msg.Content">Edit</a>
                                }
                            </div>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No messages yet.</p>
            }
        </div>

        <!-- Bottom input area -->
        <div class="chat-input-area">
            <form method="post" action="/Chat/PostMessage" class="chat-form" id="chatForm">
                <input type="hidden" id="messageId" name="messageId" />
                <textarea id="content" name="content" placeholder="Type your message..."></textarea>
                <button type="submit" id="sendButton">Send</button>
            </form>
        </div>

    </div>

    <!-- JavaScript to Handle Modal -->
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const textarea = document.getElementById("content");
            const messageIdInput = document.getElementById("messageId");
            const sendButton = document.getElementById("sendButton");
            const chatForm = document.getElementById("chatForm");

            // Handle clicking "Edit"
            document.querySelectorAll(".edit-link").forEach(link => {
                link.addEventListener("click", function (event) {
                    event.preventDefault();

                    // Get message data
                    const messageId = this.getAttribute("data-message-id");
                    const messageContent = this.getAttribute("data-message-content");

                    // Populate the input field
                    textarea.value = messageContent;
                    messageIdInput.value = messageId;

                    // Change button text
                    sendButton.textContent = "Update";
                });
            });

            // Handle form submission (detect if updating or sending new message)
            chatForm.addEventListener("submit", function (event) {
                event.preventDefault();

                const messageId = messageIdInput.value;
                const messageContent = textarea.value.trim();

                if (!messageContent) {
                    alert("Message cannot be empty.");
                    return;
                }

                if (messageId) {
                    // Update existing message
                    fetch("/Chat/EditMessage", {
                        method: "POST",
                        headers: { "Content-Type": "application/x-www-form-urlencoded" },
                        body: `messageId=${messageId}&updatedContent=${encodeURIComponent(messageContent)}`
                    })
                        .then(response => {
                            if (response.ok) {
                                location.reload(); // Refresh messages
                            } else {
                                alert("Error updating message.");
                            }
                        });

                } else {
                    // Send new message
                    chatForm.submit();
                }
            });
        });
    </script>
</body>
</html>


